#!/usr/bin/env python3

# proposed usage:
# ./mtgdump.py `echo $(ls ???.rst|cut -d. -f1)|sed "s/ /,/g"`

import click
import requests

card_template = """
:mtgtip:`{card[name]}<{image}|{card_uri}>`
   {card_text}

"""

symbols_map = {
    #    '}{': '} {',
    "{E}": "|energy|",
    "{C}": "|colorless|",
    "{T}": "|tap|",
    "{Q}": "|untap|",
    "{U}": "|mana_u|",
    "{W}": "|mana_w|",
    "{G}": "|mana_g|",
    "{B}": "|mana_b|",
    "{R}": "|mana_r|",
    "{P}": "|mana_p|",
    "{S}": "|mana_s|",
    "{2/U}": "|mana_2u|",
    "{2/W}": "|mana_2w|",
    "{2/B}": "|mana_2b|",
    "{2/G}": "|mana_2g|",
    "{2/R}": "|mana_2r|",
    "{U/P}": "|mana_up|",
    "{W/P}": "|mana_wp|",
    "{B/P}": "|mana_bp|",
    "{G/P}": "|mana_gp|",
    "{R/P}": "|mana_rp|",
    "{X}": "|mana_x|",
    "{0}": "|mana_0|",
    "{1}": "|mana_1|",
    "{2}": "|mana_2|",
    "{3}": "|mana_3|",
    "{4}": "|mana_4|",
    "{5}": "|mana_5|",
    "{6}": "|mana_6|",
    "{7}": "|mana_7|",
    "{8}": "|mana_8|",
    "{9}": "|mana_9|",
    "{10}": "|mana_10|",
    "{11}": "|mana_11|",
    "{12}": "|mana_12|",
    "{13}": "|mana_13|",
    "{14}": "|mana_14|",
    "{15}": "|mana_15|",
    "{R/G}": "|mana_rg|",
    "{R/W}": "|mana_rw|",
    "{U/B}": "|mana_ub|",
    "{U/R}": "|mana_ur|",
    "{W/B}": "|mana_wb|",
    "{W/U}": "|mana_wu|",
    "{B/G}": "|mana_bg|",
    "{B/R}": "|mana_br|",
    "{G/W}": "|mana_gw|",
    "{G/U}": "|mana_gu|",
    "\n": "\n\n   ",
    "||": "|\ |",
}


def reformat_card_text(text, card_name=None):
    for t, s in symbols_map.items():
        text = text.replace(t, s)
    # if card_name is not None:
    #     text = text.replace(card_name, 'this card')
    return text


@click.command()
@click.argument("expansions")
def import_rst(expansions):
    expansions = map(str.strip, expansions.split(","))
    for expansion in expansions:
        cache = []
        with open(f"{expansion}.rst", "w") as output:
            result = requests.get(f"https://api.scryfall.com/sets/{expansion.lower()}")
            if result.status_code != 200:
                print(f"ERROR retrieving expansion {expansion}!")
                continue
            name = result.json()["name"]
            result = requests.get(
                f"https://api.scryfall.com/cards/search?order=set&q=e%3A{expansion.lower()}&unique=prints"
            )
            if result.status_code != 200:
                print(f"ERROR retrieving expansion {expansion} ({name})!")
                continue
            data = result.json()
            output.write(
                f""".. {name} (autogenerated)
.. include:: symbols.rst

:mtgexp:`{expansion}` {name}
{(len(name) + len(expansion) + 12) * '='}

"""
            )
            while True:
                for card in data["data"]:
                    name = card["name"]
                    if name not in cache:
                        print(name)
                        cache.append(name)
                        if card.get("card_faces"):
                            for face in card["card_faces"]:
                                if "image_uris" in face:
                                    image_uri = face["image_uris"]["border_crop"]
                                else:
                                    image_uri = card["image_uris"]["border_crop"]
                                output.write(
                                    card_template.format(
                                        card=face,
                                        card_uri=card["scryfall_uri"],
                                        image=image_uri,
                                        card_text=reformat_card_text(
                                            face.get("oracle_text", "")
                                        ),
                                    )
                                )
                        else:
                            output.write(
                                card_template.format(
                                    card=card,
                                    card_uri=card["scryfall_uri"],
                                    image=card["image_uris"]["border_crop"],
                                    card_text=reformat_card_text(
                                        card.get("oracle_text", "")
                                    ),
                                )
                            )
                if not data["has_more"]:
                    break
                result = requests.get(data["next_page"])
                data = result.json()


if __name__ == "__main__":
    import_rst()
